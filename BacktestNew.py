# -*- coding: utf-8 -*-
"""Copy of Backtest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bJeI-5CmAfEbfYEY5GnWqT5I7_KdfBGL
"""

import pandas as pd
import numpy as np
import streamlit as st
import matplotlib.pyplot as plt

uploaded_file = st.file_uploader("Upload your Excel file", type=["xlsx"])

if uploaded_file is not None:
    # Load data
    data = pd.read_excel(uploaded_file)
    data = data.iloc[2:]  # Skip header rows
    data.rename(
        columns={
            'Ticker': 'date',
            '^BSESN': 'close',
            'Unnamed: 2': 'high',
            'Unnamed: 3': 'low',
            'Unnamed: 4': 'open',
        },
        inplace=True,
    )
    data.dropna(inplace=True)
    data['date'] = pd.to_datetime(data['date'])
    data.set_index('date', inplace=True)

    # Convert columns to numeric
    for col in ['close', 'high', 'low', 'open']:
        data[col] = pd.to_numeric(data[col], errors='coerce')

    # Calculate SMA and Bollinger Bands
    data['sma100'] = data['close'].rolling(window=100).mean()
    data['sma200'] = data['close'].rolling(window=200).mean()
    data['rolling_std'] = data['close'].rolling(window=100).std()
    data['upper_band'] = data['sma100'] + (2 * data['rolling_std'])
    data['lower_band'] = data['sma100'] - (2 * data['rolling_std'])

    st.write("Data Preview", data.head())

    # User inputs
    initial_capital = st.number_input("Initial Capital", value=100000)
    investment_type = st.selectbox(
        "Investment Strategy", ['aggressive', 'moderate', 'passive']
    )

    # Backtesting Function
    def backtest(data, initial_capital, investment_type):
        if investment_type == 'aggressive':
            investment_fraction = 1.0
        elif investment_type == 'moderate':
            investment_fraction = 0.5
        elif investment_type == 'passive':
            investment_fraction = 0.25
        else:
            st.write("Invalid strategy.")
            return

        cash = initial_capital
        position = 0
        portfolio_value = []

        def buy_stock(price, amount):
            nonlocal cash, position
            total_cost = price * amount
            if cash >= total_cost:
                position += amount
                cash -= total_cost
            return total_cost

        def sell_stock(price, amount):
            nonlocal cash, position
            total_revenue = price * amount
            if position >= amount:
                position -= amount
                cash += total_revenue
            return total_revenue

        for i in range(100, len(data)):
            current_price = data['close'].iloc[i]
            sma100 = data['sma100'].iloc[i]
            sma200 = data['sma200'].iloc[i]
            lower_band = data['lower_band'].iloc[i]
            upper_band = data['upper_band'].iloc[i]

            # Buy Condition
            if current_price <= lower_band and sma100 > sma200 and position == 0:
                available_cash = cash * investment_fraction
                amount_to_buy = available_cash // current_price
                buy_stock(current_price, amount_to_buy)

            # Sell Condition
            elif current_price >= upper_band and sma100 < sma200 and position > 0:
                sell_stock(current_price, position)

            # Update portfolio value
            portfolio_value.append(cash + position * current_price)

        final_value = portfolio_value[-1]
        st.write(f"Initial Capital: {initial_capital}")
        st.write(f"Final Portfolio Value: {final_value}")
        st.write(f"Profit/Loss: {final_value - initial_capital}")

        return portfolio_value

    # Run Backtest
    if st.button("Run Backtest"):
        portfolio_value = backtest(data, initial_capital, investment_type)

        # Plot Portfolio Value
        st.line_chart(portfolio_value)

